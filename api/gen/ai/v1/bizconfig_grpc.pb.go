// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bizconfig.proto

package aiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BizConfigService_CreateBizConfig_FullMethodName = "/ai.v1.BizConfigService/CreateBizConfig"
	BizConfigService_GetBizConfig_FullMethodName    = "/ai.v1.BizConfigService/GetBizConfig"
	BizConfigService_UpdateBizConfig_FullMethodName = "/ai.v1.BizConfigService/UpdateBizConfig"
	BizConfigService_DeleteBizConfig_FullMethodName = "/ai.v1.BizConfigService/DeleteBizConfig"
	BizConfigService_ListBizConfigs_FullMethodName  = "/ai.v1.BizConfigService/ListBizConfigs"
	BizConfigService_CheckQuota_FullMethodName      = "/ai.v1.BizConfigService/CheckQuota"
	BizConfigService_UpdateQuota_FullMethodName     = "/ai.v1.BizConfigService/UpdateQuota"
)

// BizConfigServiceClient is the client API for BizConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizConfigServiceClient interface {
	CreateBizConfig(ctx context.Context, in *CreateBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error)
	GetBizConfig(ctx context.Context, in *GetBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error)
	UpdateBizConfig(ctx context.Context, in *UpdateBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error)
	DeleteBizConfig(ctx context.Context, in *DeleteBizConfigRequest, opts ...grpc.CallOption) (*DeleteBizConfigResponse, error)
	ListBizConfigs(ctx context.Context, in *ListBizConfigsRequest, opts ...grpc.CallOption) (*ListBizConfigsResponse, error)
	// 限额控制相关接口
	CheckQuota(ctx context.Context, in *CheckQuotaRequest, opts ...grpc.CallOption) (*CheckQuotaResponse, error)
	UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error)
}

type bizConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBizConfigServiceClient(cc grpc.ClientConnInterface) BizConfigServiceClient {
	return &bizConfigServiceClient{cc}
}

func (c *bizConfigServiceClient) CreateBizConfig(ctx context.Context, in *CreateBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizConfigResponse)
	err := c.cc.Invoke(ctx, BizConfigService_CreateBizConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) GetBizConfig(ctx context.Context, in *GetBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizConfigResponse)
	err := c.cc.Invoke(ctx, BizConfigService_GetBizConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) UpdateBizConfig(ctx context.Context, in *UpdateBizConfigRequest, opts ...grpc.CallOption) (*BizConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BizConfigResponse)
	err := c.cc.Invoke(ctx, BizConfigService_UpdateBizConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) DeleteBizConfig(ctx context.Context, in *DeleteBizConfigRequest, opts ...grpc.CallOption) (*DeleteBizConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBizConfigResponse)
	err := c.cc.Invoke(ctx, BizConfigService_DeleteBizConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) ListBizConfigs(ctx context.Context, in *ListBizConfigsRequest, opts ...grpc.CallOption) (*ListBizConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBizConfigsResponse)
	err := c.cc.Invoke(ctx, BizConfigService_ListBizConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) CheckQuota(ctx context.Context, in *CheckQuotaRequest, opts ...grpc.CallOption) (*CheckQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckQuotaResponse)
	err := c.cc.Invoke(ctx, BizConfigService_CheckQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizConfigServiceClient) UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuotaResponse)
	err := c.cc.Invoke(ctx, BizConfigService_UpdateQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizConfigServiceServer is the server API for BizConfigService service.
// All implementations must embed UnimplementedBizConfigServiceServer
// for forward compatibility.
type BizConfigServiceServer interface {
	CreateBizConfig(context.Context, *CreateBizConfigRequest) (*BizConfigResponse, error)
	GetBizConfig(context.Context, *GetBizConfigRequest) (*BizConfigResponse, error)
	UpdateBizConfig(context.Context, *UpdateBizConfigRequest) (*BizConfigResponse, error)
	DeleteBizConfig(context.Context, *DeleteBizConfigRequest) (*DeleteBizConfigResponse, error)
	ListBizConfigs(context.Context, *ListBizConfigsRequest) (*ListBizConfigsResponse, error)
	// 限额控制相关接口
	CheckQuota(context.Context, *CheckQuotaRequest) (*CheckQuotaResponse, error)
	UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error)
	mustEmbedUnimplementedBizConfigServiceServer()
}

// UnimplementedBizConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBizConfigServiceServer struct{}

func (UnimplementedBizConfigServiceServer) CreateBizConfig(context.Context, *CreateBizConfigRequest) (*BizConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBizConfig not implemented")
}
func (UnimplementedBizConfigServiceServer) GetBizConfig(context.Context, *GetBizConfigRequest) (*BizConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBizConfig not implemented")
}
func (UnimplementedBizConfigServiceServer) UpdateBizConfig(context.Context, *UpdateBizConfigRequest) (*BizConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBizConfig not implemented")
}
func (UnimplementedBizConfigServiceServer) DeleteBizConfig(context.Context, *DeleteBizConfigRequest) (*DeleteBizConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBizConfig not implemented")
}
func (UnimplementedBizConfigServiceServer) ListBizConfigs(context.Context, *ListBizConfigsRequest) (*ListBizConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBizConfigs not implemented")
}
func (UnimplementedBizConfigServiceServer) CheckQuota(context.Context, *CheckQuotaRequest) (*CheckQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuota not implemented")
}
func (UnimplementedBizConfigServiceServer) UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuota not implemented")
}
func (UnimplementedBizConfigServiceServer) mustEmbedUnimplementedBizConfigServiceServer() {}
func (UnimplementedBizConfigServiceServer) testEmbeddedByValue()                          {}

// UnsafeBizConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizConfigServiceServer will
// result in compilation errors.
type UnsafeBizConfigServiceServer interface {
	mustEmbedUnimplementedBizConfigServiceServer()
}

func RegisterBizConfigServiceServer(s grpc.ServiceRegistrar, srv BizConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedBizConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BizConfigService_ServiceDesc, srv)
}

func _BizConfigService_CreateBizConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBizConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).CreateBizConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_CreateBizConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).CreateBizConfig(ctx, req.(*CreateBizConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_GetBizConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBizConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).GetBizConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_GetBizConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).GetBizConfig(ctx, req.(*GetBizConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_UpdateBizConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBizConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).UpdateBizConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_UpdateBizConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).UpdateBizConfig(ctx, req.(*UpdateBizConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_DeleteBizConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBizConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).DeleteBizConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_DeleteBizConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).DeleteBizConfig(ctx, req.(*DeleteBizConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_ListBizConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBizConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).ListBizConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_ListBizConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).ListBizConfigs(ctx, req.(*ListBizConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_CheckQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).CheckQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_CheckQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).CheckQuota(ctx, req.(*CheckQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizConfigService_UpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizConfigServiceServer).UpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BizConfigService_UpdateQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizConfigServiceServer).UpdateQuota(ctx, req.(*UpdateQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BizConfigService_ServiceDesc is the grpc.ServiceDesc for BizConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.v1.BizConfigService",
	HandlerType: (*BizConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBizConfig",
			Handler:    _BizConfigService_CreateBizConfig_Handler,
		},
		{
			MethodName: "GetBizConfig",
			Handler:    _BizConfigService_GetBizConfig_Handler,
		},
		{
			MethodName: "UpdateBizConfig",
			Handler:    _BizConfigService_UpdateBizConfig_Handler,
		},
		{
			MethodName: "DeleteBizConfig",
			Handler:    _BizConfigService_DeleteBizConfig_Handler,
		},
		{
			MethodName: "ListBizConfigs",
			Handler:    _BizConfigService_ListBizConfigs_Handler,
		},
		{
			MethodName: "CheckQuota",
			Handler:    _BizConfigService_CheckQuota_Handler,
		},
		{
			MethodName: "UpdateQuota",
			Handler:    _BizConfigService_UpdateQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bizconfig.proto",
}
